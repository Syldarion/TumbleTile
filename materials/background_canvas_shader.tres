[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 bg_color : hint_color;
uniform vec4 hex_color : hint_color;
uniform float rot_rads;
uniform vec2 move_speed;
uniform float rep_factor;
uniform float hex_size;
uniform float zoom;

vec2 rotateUV(vec2 uv, float rotation) {
    float mid = 0.5;
    return vec2(
        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,
        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid
    );
}

vec2 opRep(vec2 p, float s) {
	return mod(p + s * 0.5, s) - s * 0.5;
}

float sdHexagon( in vec2 p, in float r ) {
    const vec3 k = vec3(-0.866025404,0.5,0.577350269);
    p = abs(p);
    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);
    return length(p)*sign(p.y);
}

void fragment() {
	vec2 p = (2.0 * FRAGCOORD.xy - vec2(1024.0, 600.0)) / 600.0;
	p = rotateUV(p, rot_rads);
	
	vec2 q = p * zoom + move_speed * TIME;
    vec2 r = opRep(q, rep_factor);
    float d = sdHexagon(r, hex_size) -  0.01;
	float b = 1.0 - smoothstep(0.0, 0.01, d);
	
	COLOR = mix(bg_color, hex_color, b);
}"

[resource]
shader = SubResource( 1 )
shader_param/bg_color = Color( 1, 0.290196, 0.290196, 0.6 )
shader_param/hex_color = Color( 0.27451, 0.278431, 0.560784, 1 )
shader_param/rot_rads = 0.4
shader_param/move_speed = Vector2( 0.5, 0.5 )
shader_param/rep_factor = 2.0
shader_param/hex_size = 0.4
shader_param/zoom = 4.0
